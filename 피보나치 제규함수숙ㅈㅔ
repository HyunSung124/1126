# #옹알이(1)
# def solution(babbling):
#     answer = 0
#     can = "aya", "ye", "woo", "ma"
#     for i in babbling:
#          if
#     return answer
# a = ["aya", "yee", "u", "maa", "wyeoo"]


#다른방법
# def solution(babbling):
#     answer = 0
#     can = ["aya", "ye", "woo", "ma"]
#
#     for bab in babbling:
#         d = bab
#         for c in can:
#             i = d.find(c) + len(c)
#             if d[i: i + len(c)] == c:
#                 break
#             d = d.replace(c, '1', 1)
#         if d.isdigit():
#             answer += 1
#
#     return answer
# print(solution(babbling))



#복습
#함수의 입력값이 없는 경우   ex) pop(),upper(),lower()
# def return_A():          #입력값이 없어도 함수의 실행이 가능하다.
# 	return "A"
#
# print(return_A())        #출력값 => A
#
# #함수의 반환값이 없는 경우   ex) append(), insert()
# def print_string(string:str):       #입력값이 있지만 결과값을 반환하지는 않는다.
# 	print(string)
#
# print(print_string("Hello"))        #출력값 => "Hello"        <-함수의 실행문
# 																		#		  			None         <-함수의 반환값
#
# #입력값, 반환값 둘 다 없는 경우
#
# def what_time_is_it_now():
# 	import datetime
# 	print(str(datetime.datetime.now())[:16])



#매개변수의 개수가 몇 개가 필요할지 모를경우
# def sum_nums(*args):
# 	total = 0
# 	for num in args:
# 		total += num
# 	return total
#
# print(sum_nums(1,2,3,4,5,6,7,8,9)) #출력값 => 45
#
# #여러개의 문자열을 입력받아 하나의 문자열로 반환하는 sum_strings함수를 구현하시오.
# #print(sum_strings("Hello","Everyone", "My","name","is","ParkChanBin"))
# #출력값 => "Hello Everyone My name is ParkChanBin"
#
#
#
#
# #입력한 인수를 딕셔너리 형태로 사용하고 싶을 때
# def print_dict(**kwargs):
# 	print(kwargs)
#
# print_dict(A = 1, B = 2)       #출력값 = {"A" : 1,"B": 2}


#재귀 함수
# 입력 받은 num부터 1까지의 수들을 출력하는 함수 print_num()
# def print_num(num):
# 	print(num, end = ' -> ')
# 	return print_num(num - 1)        # 함수 내에서 함수 자신의 이름을 다시 불러주고 있다.
#
# print_num(10)    # 출력값: 10 -> 9 -> 8 ->...
# 							   # RecursionError: maximum recursion depth exceeded
# 								 #                 while calling a Python object
#
# # print_num() 함수가 계속 해서 자신을 호출 하기 때문에 최대 재귀횟수를 넘게 되어 오류 발생
# # 재귀 함수의 실행이 멈추려면 재귀 호출 과정에서 언젠가는 더 이상 자신을 호출하지 않아야 한다.
# # 이렇게 더 이상 재귀 호출이 발생하지 않도록 하는 경우를 기저 조건(base case)이라 한다.
#
#
# def print_num(num):
#     print(num, end=' ')
#     if num == 1: return
#     print(end = '-> ')
#     return print_num(num - 1)
#
# print_num(10)




# 1부터 n까지의 합을 구하는 재귀 함수 SumToN(n)
# def SumToN(n):
#     if n == 1: return 1
#     return n + SumToN(n-1)
# print(SumToN(10))



# def Fac(n):
#     if n == 1: return 1
#     return n * SumToN(n-1)
# print(Fac(int(input)))


#피보나치
